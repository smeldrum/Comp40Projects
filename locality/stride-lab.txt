                 COMP 40 Lab: Striding Through Memory
                         (for groups of two)

                          September 28, 2012

+--------------------------------------------------------+
|Keeper of the record:                                   |
|--------------------------------------------------------|
|Lab partner:                                            |
+--------------------------------------------------------+

Part I: CALCULATING MISSES

To predict the miss rate of a single load is quite difficult.
Predicting a *sequence* of loads is more tractable.  The longer the
sequence, and the more regular the access patterns, the easier it is
to predict the cost.

Reminder: our machines have line sizes of 64 bytes.

  1. Suppose you load 64 bytes at addresses

         a, a+k, a+2k, .. a+63k

     where address `a` occurs at offset 0 of a cache line.
     Suppose that k, which is called the "stride", is at most 64.

       - How many cache lines are loaded?


       - What is the average miss rate?


       - If time T1 gives the number of nanoseconds required to load
         from a line already in the cache, and time T2 gives the
         number of nanoseconds required to load from a line *not*
         already in the cache, derive a *formula* giving the expected
         number of nanoseconds per load as a function of T1, T2, and k.


  2. What do you expect to happen when the stride k becomes much
     larger than 64?



  3. What do you expect to happen when the total number of loads is
     increased to something much larger than 64?



PART II: REVISITING CACHE LINES


Now suppose that your loads are limited to a particular block
spanning a block of B bytes starting at address `a`:

    a <= p < a + B

Further suppose that your access pattern changes so that when you
go beyond block B, you "wrap around" back to the beginning.  More
precisely, suppose you load all the bytes of B in the following
sequence:

    a, a+k, a+2k, ... a+(nk mod B), ..., a + ((B-1)k mod B)


  4. The memory block is divided into 64-byte sub-blocks, each of
     which is eligible to be loaded into a cache line.  How many loads
     will there be from each sub-block?

  5. If B is much larger than the size of L2 cache, say 50MB, then
     as a function of k, what fraction of loads cause cache misses?

  6. If B is much smaller than the size of L2 cache, say 100K, then
     as a function of k, what fraction of loads cause cache misses?

  7. If B is the same size as L2 cache, then as a function of k, what
     fraction of loads cause cache misses?


PART III: EXPERIMENTS


Your lab comes with a program 'stride.c' that can run the experiment
in Part II.  For example, if you want to try with a block size of 10MB
and a stride of 7, you write

    ./stride 10 7


  8. Measure the time to completion where B is much larger than L2
     cache and stride varies from 1 to 64.  Try these machines:

         A. linux
         B. pulsar or meteor
         C. your lab machine
         E. a Linux or OSX laptop, if you have one

     For each experiment, **plot the results on a graph.**

        - You do not need to hand in the graphs.
        - As described in the lab handout, label the graph with the
          name of the machine, its CPU, the clock rate, the size of
          the L2 cache, the amount of RAM, and the block size B.
        - Plot the stride on the X axis
        - Plot the total execution time on the Y axis

     Leave room on your graph for larger strides!

     When starting work on a new machine, we recommend you recompile
     the stride program by running

         ./compile-stride

     To run your experiments, you will find it helpful to use the
     following bash script:

         B=50 # block size in megabytes
         for ((k=1; k<=64; k++)); do
           ./stride $B $k
         done

     If you run 'bash' as your shell, you can type this on the command
     line:

         B=50
         for ((k=1; k<=64; k++)); do ./stride $B $k; done

     Or you can put it in a file and run the file with bash.         

     **RISKS**: You'll be sharing the servers.  Time-sharing will
     introduce all sorts of noise into your data.  You can mitigate
     the risks in two ways:

        - Increase B.  But be wary of a tragedy of the commons: if
          everyone increases B, the server will run out of RAM.  To
          keep an eye on memory, run 'htop' in another window (be sure
          to ssh to the right machine).
                
        - Run each experiment multiple times.  Your best best is
          probably to plot all points on your graph and for each
          stride, look at the fastest time---this is the one least
          perturbed by other processes.  Again, running more
          experiments puts more pressure on the machine, and as other
          people run more processes, it's more likely to skew your
          results. 

  9. On which machines is the naive model you learned in class a good
     predictor for the actual behavior of a program?

     
     On each such machine, what are your estimates for the times T1
     and T2?

 10. Do you see any behavior that does not fit the naive model, or
     that suggests something else might be going on?  What might be
     going on?


PART IV: KEEPING UP WITH THE ARCHITECTS

You will discover that some machines behave very much according to the
naive model we studied in class.  Others do not.

 11. Choose one misbehaving machine and keep increasing the stride
     until you start to see interesting behavior.  In some cases you
     may have to explore strides in the range of 1,000 to 10,000.
     In such a large experimental space, you cannot afford to test
     *every* stride, but perhaps exploring 10 to 20 large stride
     values will illuminate the situation.

       A. How large a stride to you have to have to elicit some
          interesting behavior?

       B. How large does the stride get before the behavior starts
          changing?

       C. What's your best estimate for the values of T1 and T2?

       D. What do you conjecture is going on?


Submit this file using script

       submit40-lab-strides
